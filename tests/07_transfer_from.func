;; transfer_from
[int, tuple, cell, tuple, int] transfer_from_data() method_id(50) {
  int function_selector = 0;
  cell data = new_data();

  slice spender = address(-1, 0x2222222222222222222222222222222222222222222222222222222222222222);
  slice from = address(-1, 0x1111111111111111111111111111111111111111111111111111111111111111);
  slice to = address(-1, 0x3333333333333333333333333333333333333333333333333333333333333333);
  slice contract = address(-1, 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA);
  int amount = 2000000000; ;; 2 MTKN

  int msg_value = 1000000000;
  cell in_msg_cell = build_message(0, spender, contract, msg_value, begin_cell());
  slice in_msg = begin_cell()
    .store_uint(op::transfer_from(), 32) ;; op
    .store_uint(now(), 64) ;; query_id
    .store_slice(from) ;; from
    .store_slice(to) ;; to
    .store_uint(amount, 256) ;; amount
    .end_cell()
    .begin_parse();

  tuple stack = unsafe_tuple([(msg_value, in_msg_cell, in_msg)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ transfer_from(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(51) {
  throw_if(error::exit_code_not_success(), exit_code != 0);
}

;; allowance after transfer_from
[int, tuple, cell, tuple, int] allowance_after_transfer_from_data() method_id(52) {
  int function_selector = 82759;
  cell data = get_prev_c4();

  slice owner = address(-1, 0x1111111111111111111111111111111111111111111111111111111111111111);
  slice spender = address(-1, 0x2222222222222222222222222222222222222222222222222222222222222222);

  tuple stack = unsafe_tuple([(owner, spender)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ allowance_after_transfer_from(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(53) {
  throw_if(error::exit_code_not_success(), exit_code != 0);
  int allowance = first(stack);
  throw_if(error::allowance_not_equal(), allowance != 18000000000);
}

;; from balance after transfer_from
[int, tuple, cell, tuple, int] from_balance_of_after_transfer_from_data() method_id(54) {
  int function_selector = 112966;
  cell data = get_prev_c4();

  slice account = address(-1, 0x1111111111111111111111111111111111111111111111111111111111111111);

  tuple stack = unsafe_tuple([(account)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ from_balance_of_after_transfer_from(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(55) {
  throw_if(error::exit_code_not_success(), exit_code != 0);
  int balance = first(stack);
  throw_if(error::balance_of_not_equal(), balance != 8000000000);
}

;; to balance after transfer_from
[int, tuple, cell, tuple, int] to_balance_of_after_transfer_from_data() method_id(56) {
  int function_selector = 112966;
  cell data = get_prev_c4();

  slice account = address(-1, 0x3333333333333333333333333333333333333333333333333333333333333333);

  tuple stack = unsafe_tuple([(account)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ to_balance_of_after_transfer_from(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(57) {
  throw_if(error::exit_code_not_success(), exit_code != 0);
  int balance = first(stack);
  throw_if(error::balance_of_not_equal(), balance != 2000000000);
}

;; when the token owner does not have enough balance
_ owner_has_not_enough_balance_transfer_from_data() method_id(58) {
  int function_selector = 0;
  cell data = new_data();

  slice spender = address(-1, 0x2222222222222222222222222222222222222222222222222222222222222222);
  slice from = address(-1, 0x1111111111111111111111111111111111111111111111111111111111111111);
  slice to = address(-1, 0x3333333333333333333333333333333333333333333333333333333333333333);
  slice contract = address(-1, 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA);
  int amount = 20000000000; ;; 20 MTKN

  int msg_value = 1000000000;
  cell in_msg_cell = build_message(0, spender, contract, msg_value, begin_cell());
  slice in_msg = begin_cell()
    .store_uint(op::transfer_from(), 32) ;; op
    .store_uint(now(), 64) ;; query_id
    .store_slice(from) ;; from
    .store_slice(to) ;; to
    .store_uint(amount, 256) ;; amount
    .end_cell()
    .begin_parse();

  tuple stack = unsafe_tuple([(msg_value, in_msg_cell, in_msg)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ owner_has_not_enough_balance_transfer_from(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(59) {
  throw_if(error::exit_code_not_success(), exit_code != exception::transfer_amount_exceeds_balance());
}

;; when the spender does not have enough allowance
_ spender_does_not_have_enough_allowance_data() method_id(60) {
  int function_selector = 0;
  cell data = new_data();

  slice spender = address(-1, 0x2222222222222222222222222222222222222222222222222222222222222222);
  slice from = address(-1, 0x3333333333333333333333333333333333333333333333333333333333333333);
  slice to = address(-1, 0x4444444444444444444444444444444444444444444444444444444444444444);
  slice contract = address(-1, 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA);
  int amount = 2000000000; ;; 2 MTKN

  int msg_value = 1000000000;
  cell in_msg_cell = build_message(0, spender, contract, msg_value, begin_cell());
  slice in_msg = begin_cell()
    .store_uint(op::transfer_from(), 32) ;; op
    .store_uint(now(), 64) ;; query_id
    .store_slice(from) ;; from
    .store_slice(to) ;; to
    .store_uint(amount, 256) ;; amount
    .end_cell()
    .begin_parse();

  tuple stack = unsafe_tuple([(msg_value, in_msg_cell, in_msg)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ spender_does_not_have_enough_allowance(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(61) {
  throw_if(error::exit_code_not_success(), exit_code != exception::insufficient_allowance());
}

;; when the spender has unlimited allowance
_ spender_has_unlimited_allowance_data() method_id(62) {
  int function_selector = 0;
  cell data = new_data();

  slice spender = address(-1, 0x7777777777777777777777777777777777777777777777777777777777777777);
  slice from = address(-1, 0x1111111111111111111111111111111111111111111111111111111111111111);
  slice to = address(-1, 0x3333333333333333333333333333333333333333333333333333333333333333);
  slice contract = address(-1, 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA);
  int amount = 2000000000; ;; 2 MTKN

  int msg_value = 1000000000;
  cell in_msg_cell = build_message(0, spender, contract, msg_value, begin_cell());
  slice in_msg = begin_cell()
    .store_uint(op::transfer_from(), 32) ;; op
    .store_uint(now(), 64) ;; query_id
    .store_slice(from) ;; from
    .store_slice(to) ;; to
    .store_uint(amount, 256) ;; amount
    .end_cell()
    .begin_parse();

  tuple stack = unsafe_tuple([(msg_value, in_msg_cell, in_msg)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ spender_has_unlimited_allowance(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(63) {
  throw_if(error::exit_code_not_success(), exit_code != 0);
}

_ spender_allowance_after_spender_has_unlimited_allowance_data() method_id(64) {
  int function_selector = 82759;
  cell data = new_data();

  slice owner = address(-1, 0x1111111111111111111111111111111111111111111111111111111111111111);
  slice spender = address(-1, 0x7777777777777777777777777777777777777777777777777777777777777777);
  tuple stack = unsafe_tuple([(owner, spender)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ spender_allowance_after_spender_has_unlimited_allowance(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(65) {
  throw_if(error::exit_code_not_success(), exit_code != 0);
  int allowance = first(stack);
  throw_if(error::allowance_not_equal(), allowance != 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
}


