slice address(int wc, int addr) inline method_id {

  ;; addr_std$10 anycast:(Maybe Anycast)
  ;; workchain_id:int8 address:bits256 = MsgAddressInt;

  return begin_cell()
    .store_uint(2, 2) ;; addr_std$10
    .store_uint(0, 1) ;; anycast nothing
    .store_int(wc, 8) ;; workchain_id:int8
    .store_uint(addr, 256) ;; address:bits256
    .end_cell()
    .begin_parse();
}

cell build_message(int bounce, slice src, slice dest, int amount, builder payload) inline method_id {

    ;;  int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    ;;  src:MsgAddressInt dest:MsgAddressInt
    ;;  value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
    ;;  created_lt:uint64 created_at:uint32 = CommonMsgInfo;

    var msg = begin_cell()
      .store_uint(0, 1) ;; int_msg_info$0
      .store_uint(0, 1) ;; ihr_disabled:Bool
      .store_uint(bounce, 1) ;; bounce:Bool
      .store_uint(0, 1) ;; bounced:Bool
      .store_slice(src) ;; src:MsgAddressInt
      .store_slice(dest) ;; dest:MsgAddressInt
      .store_grams(amount) ;;
      .store_dict(null()) ;; extra currencies
      .store_grams(0) ;; ihr_fee
      .store_grams(0) ;; fwd_fee
      .store_uint(cur_lt(), 64) ;; created_lt:uint64
      .store_uint(now(), 32) ;; created_at:uint32
      .store_uint(0, 1); ;; no init_state

    if(msg.builder_bits() + payload.builder_bits() > 1023) {
      msg = msg.store_uint(1,1) ;; Either ^X
        .store_ref(payload.end_cell());
    } else {
      msg = msg.store_uint(1,1).store_builder(payload);
    }

    return msg.end_cell();
}
