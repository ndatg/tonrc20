;; transfer
[int, tuple, cell, tuple, int] transfer_data() method_id(12) {
  int function_selector = 0;
  cell data = new_data();

  slice from = address(-1, 0x1111111111111111111111111111111111111111111111111111111111111111);
  slice to = address(-1, 0x2222222222222222222222222222222222222222222222222222222222222222);
  slice contract = address(-1, 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA);
  int amount = 2000000000; ;; 2 MTKN

  int msg_value = 1000000000;
  cell in_msg_cell = build_message(0, from, contract, msg_value, begin_cell());
  slice in_msg = begin_cell()
    .store_uint(op::transfer(), 32) ;; op
    .store_uint(now(), 64) ;; query_id
    .store_slice(to) ;; to
    .store_uint(amount, 256) ;; amount
    .end_cell()
    .begin_parse();

  tuple stack = unsafe_tuple([(msg_value, in_msg_cell, in_msg)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ transfer(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(13) {
  throw_if(error::exit_code_not_success(), exit_code != 0);
}

;; sender balance after transfer
[int, tuple, cell, tuple, int] from_balance_of_after_transfer_data() method_id(14) {
  int function_selector = 112966;
  cell data = get_prev_c4();

  slice account = address(-1, 0x1111111111111111111111111111111111111111111111111111111111111111);

  tuple stack = unsafe_tuple([(account)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ from_balance_of_after_transfer(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(15) {
  throw_if(error::exit_code_not_success(), exit_code != 0);
  int balance = first(stack);
  throw_if(error::balance_of_not_equal(), balance != 8000000000);
}

;; recipient balance after transfer
[int, tuple, cell, tuple, int] to_balance_of_after_transfer_data() method_id(16) {
  int function_selector = 112966;
  cell data = get_prev_c4();

  slice account = address(-1, 0x2222222222222222222222222222222222222222222222222222222222222222);

  tuple stack = unsafe_tuple([(account)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ to_balance_of_after_transfer(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(17) {
  throw_if(error::exit_code_not_success(), exit_code != 0);
  int balance = first(stack);
  throw_if(error::balance_of_not_equal(), balance != 2000000000);
}

;; when the sender is the zero address
[int, tuple, cell, tuple, int] transfer_from_zero_address_data() method_id(18) {
  int function_selector = 0;
  cell data = new_data();

  slice from = address(-1, 0);
  slice to = address(-1, 0x2222222222222222222222222222222222222222222222222222222222222222);
  slice contract = address(-1, 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA);
  int amount = 2000000000; ;; 2 MTKN

  int msg_value = 1000000000;
  cell in_msg_cell = build_message(0, from, contract, msg_value, begin_cell());
  slice in_msg = begin_cell()
    .store_uint(op::transfer(), 32) ;; op
    .store_uint(now(), 64) ;; query_id
    .store_slice(to) ;; to
    .store_uint(amount, 256) ;; amount
    .end_cell()
    .begin_parse();

  tuple stack = unsafe_tuple([(msg_value, in_msg_cell, in_msg)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ transfer_from_zero_address(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(19) {
  throw_if(error::exit_code_not_success(), exit_code != exception::transfer_from_zero_address());
}

;; when the recipient is the zero address
[int, tuple, cell, tuple, int] transfer_to_zero_address_data() method_id(20) {
  int function_selector = 0;
  cell data = new_data();

  slice from = address(-1, 0x1111111111111111111111111111111111111111111111111111111111111111);
  slice to = address(-1, 0);
  slice contract = address(-1, 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA);
  int amount = 2000000000; ;; 2 MTKN

  int msg_value = 1000000000;
  cell in_msg_cell = build_message(0, from, contract, msg_value, begin_cell());
  slice in_msg = begin_cell()
    .store_uint(op::transfer(), 32) ;; op
    .store_uint(now(), 64) ;; query_id
    .store_slice(to) ;; to
    .store_uint(amount, 256) ;; amount
    .end_cell()
    .begin_parse();

  tuple stack = unsafe_tuple([(msg_value, in_msg_cell, in_msg)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ transfer_to_zero_address(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(21) {
  throw_if(error::exit_code_not_success(), exit_code != exception::transfer_to_zero_address());
}

;; when the sender has insufficient balance
[int, tuple, cell, tuple, int] transfer_amount_exceeds_balance_data() method_id(22) {
  int function_selector = 0;
  cell data = new_data();

  slice from = address(-1, 0x1111111111111111111111111111111111111111111111111111111111111111);
  slice to = address(-1, 0x2222222222222222222222222222222222222222222222222222222222222222);
  slice contract = address(-1, 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA);
  int amount = 100000000000; ;; 100 MTKN

  int msg_value = 1000000000;
  cell in_msg_cell = build_message(0, from, contract, msg_value, begin_cell());
  slice in_msg = begin_cell()
    .store_uint(op::transfer(), 32) ;; op
    .store_uint(now(), 64) ;; query_id
    .store_slice(to) ;; to
    .store_uint(amount, 256) ;; amount
    .end_cell()
    .begin_parse();

  tuple stack = unsafe_tuple([(msg_value, in_msg_cell, in_msg)]);

  return [function_selector, stack, data, get_c7(), null()];
}

_ transfer_amount_exceeds_balance(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(23) {
  throw_if(error::exit_code_not_success(), exit_code != exception::transfer_amount_exceeds_balance());
}
